apply plugin: "com.android.application"
apply plugin: "com.facebook.react"

// ---- CI inputs (optional) ----
def ciRunNumber   = (System.getenv("CI_VERSION_CODE") ?: System.getenv("GITHUB_RUN_NUMBER") ?: "1").toInteger()
def ciNameBase    = System.getenv("CI_VERSION_NAME_BASE") ?: "1.0"   // e.g. "1.2"
def ciVersionName = System.getenv("CI_VERSION_NAME")                 // override full name if you pass it

react { /* defaults */ }

def enableProguardInReleaseBuilds = false
def jscFlavor = 'org.webkit:android-jsc:+'

android {
  ndkVersion rootProject.ext.ndkVersion
  compileSdkVersion rootProject.ext.compileSdkVersion
  namespace "com.harmanliikenneoy"

  defaultConfig {
    applicationId "com.harmanliikenneoy"
    minSdkVersion rootProject.ext.minSdkVersion
    targetSdkVersion rootProject.ext.targetSdkVersion
    // will be overridden per flavor below
    versionCode 1
    versionName "0.0.0"
  }

  // ---- ENV FLAVORS ----
  flavorDimensions "env"
  productFlavors {
    // Reserve disjoint versionCode ranges to prevent collisions:
    // prod:    0–999,999
    // staging: 1,000,000–1,999,999
    // dev:     2,000,000–2,999,999
    dev {
      dimension "env"
      applicationIdSuffix ".dev"
      versionCode 2000000 + ciRunNumber
      versionName (ciVersionName ?: "${ciNameBase}.${ciRunNumber}-dev")
    }
    staging {
      dimension "env"
      applicationIdSuffix ".stg"
      versionCode 1000000 + ciRunNumber
      versionName (ciVersionName ?: "${ciNameBase}.${ciRunNumber}-stg")
    }
    prod {
      dimension "env"
      // no suffix → real package name for production
      versionCode 0 + ciRunNumber
      versionName (ciVersionName ?: "${ciNameBase}.${ciRunNumber}")
    }
  }

  signingConfigs {
    debug {
      storeFile file('debug.keystore'); storePassword 'android'
      keyAlias 'androiddebugkey'; keyPassword 'android'
    }
    release {
      if (System.getenv("CI") != null) {
        storeFile file("keystore.jks")
        storePassword System.getenv("ANDROID_KEYSTORE_PASSWORD")
        keyAlias System.getenv("ANDROID_KEY_ALIAS")
        keyPassword System.getenv("ANDROID_KEY_ALIAS_PASSWORD")
      } else {
        def propsFile = rootProject.file("keystore.properties")
        if (propsFile.exists()) {
          def props = new Properties(); props.load(new FileInputStream(propsFile))
          storeFile file(props['storeFile'])
          storePassword props['storePassword']
          keyAlias props['keyAlias']
          keyPassword props['keyPassword']
        } else {
          storeFile file('debug.keystore'); storePassword 'android'
          keyAlias 'androiddebugkey'; keyPassword 'android'
        }
      }
    }
  }

  buildTypes {
    debug { signingConfig signingConfigs.debug }
    release {
      signingConfig signingConfigs.release
      minifyEnabled enableProguardInReleaseBuilds
      proguardFiles getDefaultProguardFile("proguard-android.txt"), "proguard-rules.pro"
    }
  }
}

dependencies {
  implementation("com.facebook.react:react-android")
  debugImplementation("com.facebook.flipper:flipper:${FLIPPER_VERSION}")
  debugImplementation("com.facebook.flipper:flipper-network-plugin:${FLIPPER_VERSION}") { exclude group:'com.squareup.okhttp3', module:'okhttp' }
  debugImplementation("com.facebook.flipper:flipper-fresco-plugin:${FLIPPER_VERSION}")
  if (hermesEnabled.toBoolean()) implementation("com.facebook.react:hermes-android") else implementation jscFlavor
}

apply from: file("../../node_modules/@react-native-community/cli-platform-android/native_modules.gradle")
applyNativeModulesAppBuildGradle(project)
