apply plugin: "com.android.application"
apply plugin: "com.facebook.react"

// ---- CI-friendly versioning values ----
def ciRunNumber = System.getenv("CI_BUILD_NUMBER") ?: System.getenv("GITHUB_RUN_NUMBER")
def ciVersionName = System.getenv("CI_VERSION_NAME")

react {
  // defaults are fine for RN 0.74+; keep commented settings if needed
}

// Toggle minification (Proguard/R8) for release
def enableProguardInReleaseBuilds = false

// Use JSC when Hermes disabled
def jscFlavor = 'org.webkit:android-jsc:+'

android {
  ndkVersion rootProject.ext.ndkVersion
  compileSdkVersion rootProject.ext.compileSdkVersion

  namespace "com.harmanliikenneoy"

  defaultConfig {
    applicationId "com.harmanliikenneoy"
    minSdkVersion rootProject.ext.minSdkVersion
    targetSdkVersion rootProject.ext.targetSdkVersion

    // --- CI-driven versioning ---
    versionCode (ciRunNumber != null ? ciRunNumber.toInteger() : 1)
    versionName (ciVersionName ?: "1.0." + (ciRunNumber ?: "0"))
  }

  signingConfigs {
    // Local debug as before
    debug {
      storeFile file('debug.keystore')
      storePassword 'android'
      keyAlias 'androiddebugkey'
      keyPassword 'android'
    }

    // Release: CI env vars or optional local keystore.properties fallback
    release {
      if (System.getenv("CI") != null) {
        // GitHub Actions step writes keystore.jks into android/app/
        storeFile file("keystore.jks")
        storePassword System.getenv("ANDROID_KEYSTORE_PASSWORD")
        keyAlias System.getenv("ANDROID_KEY_ALIAS")
        keyPassword System.getenv("ANDROID_KEY_ALIAS_PASSWORD")
      } else {
        // Optional local signing (create android/keystore.properties)
        def propsFile = rootProject.file("keystore.properties")
        if (propsFile.exists()) {
          def props = new Properties()
          props.load(new FileInputStream(propsFile))
          storeFile file(props['storeFile'])
          storePassword props['storePassword']
          keyAlias props['keyAlias']
          keyPassword props['keyPassword']
        } else {
          // fallback to debug signing for local dev
          storeFile file('debug.keystore')
          storePassword 'android'
          keyAlias 'androiddebugkey'
          keyPassword 'android'
        }
      }
    }
  }

  buildTypes {
    debug {
      signingConfig signingConfigs.debug
    }
    release {
      signingConfig signingConfigs.release
      minifyEnabled enableProguardInReleaseBuilds
      proguardFiles getDefaultProguardFile("proguard-android.txt"), "proguard-rules.pro"
    }
  }
}

dependencies {
  // RN core
  implementation("com.facebook.react:react-android")

  // Flipper (debug only)
  debugImplementation("com.facebook.flipper:flipper:${FLIPPER_VERSION}")
  debugImplementation("com.facebook.flipper:flipper-network-plugin:${FLIPPER_VERSION}") {
    exclude group:'com.squareup.okhttp3', module:'okhttp'
  }
  debugImplementation("com.facebook.flipper:flipper-fresco-plugin:${FLIPPER_VERSION}")

  if (hermesEnabled.toBoolean()) {
    implementation("com.facebook.react:hermes-android")
  } else {
    implementation jscFlavor
  }
}

// Autolink RN native modules
apply from: file("../../node_modules/@react-native-community/cli-platform-android/native_modules.gradle"); 
applyNativeModulesAppBuildGradle(project)
