default_platform(:android)

platform :android do
  lane :firebase_release do
    flavor = (ENV["FLAVOR"] || "dev").downcase
    gradle_task = "assemble#{flavor.capitalize}Release"

    # We are already running in android/ (workflow working-directory),
    # so gradlew is at ./gradlew. Use project_dir "." or omit it.
    gradle(
      task: gradle_task,
      project_dir: ".",          # <-- key change (was "..")
      print_command: true
    )

    # Find APK from flavor folder (paths relative to android/)
    apk = Actions.lane_context[SharedValues::GRADLE_APK_OUTPUT_PATH]
    apk ||= ENV["GRADLE_APK_OUTPUT_PATH"]
    apk ||= Dir["app/build/outputs/apk/#{flavor}/release/*.apk"].max_by { |f| File.mtime(f) }
    apk ||= Dir["app/build/outputs/apk/release/*.apk"].max_by { |f| File.mtime(f) }
    UI.user_error!("No APK artifact found") unless apk && File.exist?(apk)

    sh("ls -la app/build/outputs/apk/#{flavor}/release || true")
    UI.message("Using APK: #{apk}")

    app_id =
      case flavor
      when "prod"    then ENV["FIREBASE_ANDROID_APP_ID_PROD"] || ENV["FIREBASE_ANDROID_APP_ID"]
      when "staging" then ENV["FIREBASE_ANDROID_APP_ID_STG"]  || ENV["FIREBASE_ANDROID_APP_ID"]
      else                 ENV["FIREBASE_ANDROID_APP_ID_DEV"]  || ENV["FIREBASE_ANDROID_APP_ID"]
      end

    firebase_app_distribution(
      app: app_id,
      testers: ENV["FIREBASE_TESTERS"],
      groups: ENV["FIREBASE_GROUPS"],
      release_notes: (ENV["RELEASE_NOTES"] || ""),
      firebase_cli_token: ENV["FIREBASE_TOKEN"],
      apk_path: apk
    )
  end
end
